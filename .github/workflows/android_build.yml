name: Build_and_Sign_Quantum_NARCAN_APK_with_PennyLane

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-apk:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout source
      - name: Checkout
        uses: actions/checkout@v3

      # 2. Install Python and OS packages (including Autoconf Archive)
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install OS packages
        run: |
          sudo apt update
          sudo apt install -y \
            build-essential git zip unzip openjdk-17-jdk \
            libffi-dev libssl-dev libjpeg-dev libfreetype6-dev libncurses6 \
            autoconf automake libtool libtool-bin pkg-config m4 gettext \
            autoconf-archive

      - name: Install Buildozer and p4a (nightly)
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade --pre buildozer python-for-android cython cffi==1.15.1

      # 3. Add PennyLane recipe via echo (no heredoc, no f-strings)
      - name: Add PennyLane local recipe
        run: |
          mkdir -p p4a-recipes/pennylane
          echo "from pythonforandroid.recipe import PythonRecipe" > p4a-recipes/pennylane/__init__.py
          echo "" >> p4a-recipes/pennylane/__init__.py
          echo "class PennyLaneRecipe(PythonRecipe):" >> p4a-recipes/pennylane/__init__.py
          echo "    version = \"0.36.0\"" >> p4a-recipes/pennylane/__init__.py
          echo "    url = \"https://github.com/PennyLaneAI/pennylane/archive/refs/tags/v{version}.tar.gz\"" >> p4a-recipes/pennylane/__init__.py
          echo "    depends = [\"numpy\", \"autograd\", \"networkx\", \"toml\", \"sympy\", \"setuptools\"]" >> p4a-recipes/pennylane/__init__.py
          echo "    call_hostpython_via_targetpython = False" >> p4a-recipes/pennylane/__init__.py
          echo "" >> p4a-recipes/pennylane/__init__.py
          echo "    def build_arch(self, arch):" >> p4a-recipes/pennylane/__init__.py
          echo "        super().build_arch(arch)" >> p4a-recipes/pennylane/__init__.py
          echo "        import pathlib" >> p4a-recipes/pennylane/__init__.py
          echo "        site = pathlib.Path(arch.target_python.site_packages_dir)" >> p4a-recipes/pennylane/__init__.py
          echo "        stub = site / \"scipy\"" >> p4a-recipes/pennylane/__init__.py
          echo "        stub.mkdir(exist_ok=True)" >> p4a-recipes/pennylane/__init__.py
          echo "        (stub / \"__init__.py\").write_text(\"def __getattr__(name):\\n    raise ImportError('SciPy stub: not available in Android build')\")" >> p4a-recipes/pennylane/__init__.py
          echo "" >> p4a-recipes/pennylane/__init__.py
          echo "recipe = PennyLaneRecipe()" >> p4a-recipes/pennylane/__init__.py

      # 4. Patch buildozer.spec
      - name: Patch buildozer.spec
        run: |
          buildozer init
          sed -i '/^# *source.include_patterns/c\source.include_patterns = narcan_finder_android.py' buildozer.spec
          sed -i '/^# *title/c\title = Quantum NARCAN Finder' buildozer.spec
          sed -i '/^# *package.name/c\package.name = QuantumNarcan' buildozer.spec
          sed -i '/^# *package.domain/c\package.domain = org.quantum.narcan' buildozer.spec
          sed -i '/^requirements/c\requirements = python3,kivy,kivymd,requests,httpx,numpy,psutil,cryptography,autograd,networkx,toml,sympy,pennylane' buildozer.spec
          grep -q '^version[[:space:]]*=' buildozer.spec \
            && sed -i 's/^version[[:space:]]*=.*/version = 0.1/' buildozer.spec \
            || echo 'version = 0.1' >> buildozer.spec
          grep -q '^log_level[[:space:]]*=' buildozer.spec \
            && sed -i 's/^log_level.*/log_level = 2/' buildozer.spec \
            || echo 'log_level = 2' >> buildozer.spec
          grep -q '^android.permissions' buildozer.spec \
            && sed -i 's/^android.permissions.*/android.permissions = INTERNET,WRITE_EXTERNAL_STORAGE,READ_EXTERNAL_STORAGE/' buildozer.spec \
            || echo 'android.permissions = INTERNET,WRITE_EXTERNAL_STORAGE,READ_EXTERNAL_STORAGE' >> buildozer.spec
          echo 'p4a.local_recipes = ./p4a-recipes' >> buildozer.spec
          echo 'p4a.branch = develop' >> buildozer.spec
          echo 'android.release_artifact = true' >> buildozer.spec

      # 5. Update Android SDK and generate keystore
      - name: Update Android SDK
        run: yes | buildozer android update

      - name: Generate ephemeral keystore
        run: |
          keytool -genkey -v -keystore quantum_temp.keystore \
            -alias quantumalias -keyalg RSA -keysize 2048 -validity 10000 \
            -storepass testpass -keypass testpass \
            -dname "CN=QuantumNarcan,O=OpenAI,L=Greenville,ST=SC,C=US"

      # 6. Build APK, locate, sign, and zipalign
      - name: Build APK
        run: |
          export PYTHONUNBUFFERED=1
          export DEBIAN_FRONTEND=noninteractive
          timeout 45m buildozer android release --verbose | tee buildozer_output.log

      - name: Locate unsigned APK
        run: |
          APK_PATH=$(find bin -name "*-release-unsigned.apk" -print -quit)
          if [ -z "$APK_PATH" ]; then
            echo "No unsigned APK found"; exit 1
          fi
          echo "APK_PATH=$APK_PATH" >> "$GITHUB_ENV"

      - name: Sign APK
        run: |
          jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 \
            -keystore quantum_temp.keystore -storepass testpass -keypass testpass \
            "$APK_PATH" quantumalias

      - name: Zipalign APK
        run: |
          wget -q https://dl.google.com/android/repository/build-tools_r30.0.3-linux.zip
          unzip -q build-tools_r30.0.3-linux.zip -d android-tools
          SIGNED_APK="${APK_PATH/-unsigned/-signed}"
          android-tools/**/zipalign -v 4 "$APK_PATH" "$SIGNED_APK"
          echo "SIGNED_APK=$SIGNED_APK" >> "$GITHUB_ENV"

      # 7. Upload artifacts
      - name: Upload signed APK
        uses: actions/upload-artifact@v4
        with:
          name: quantum-narcan-signed-pennylane
          path: ${{ env.SIGNED_APK }}

      - name: Upload build log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: buildozer-log
          path: buildozer_output.log
